# -*- coding: utf-8 -*-
"""Partial sums of Fourier series

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o6p7hSCVZAk6jE1Q2lub6np1-o2YwJp9
"""

import numpy as np
import matplotlib.pyplot as plt

def step(start_x, end_X, N, points):
    x = np.linspace(start_x, end_X, points)
    y = []
    for xx in x:
        point = 0
        for n in range(1, N):
            point += np.sin(n) * np.cos(n * xx) / n
        point *= 2 / np.pi
        y.append(point)
    
    for i in range(len(y)):
        y[i] += 1 / np.pi
    return x, y

def triangular(start_x, end_X, N, points):
    x = np.linspace(start_x, end_X, points)
    y = []
    for xx in x:
        point = 0
        for n in range(1, N):
            point += (np.power(-1, n) - 1) * np.cos(n * xx) / np.power(n, 2)
        point *= -2 / np.pi
        y.append(point)

    for i in range(len(y)):
        y[i] += np.pi / 2
    return x, y

def linear(start_x, end_X, N, points):
    x = np.linspace(start_x, end_X, points)
    y = []
    for xx in x:
        point = 0
        for n in range(1, N):
            point += np.power(-1, n) * np.sin(np.pi * n * xx / 5) / n
        point *= -10 / np.pi
        y.append(point)

    return x, y

fig, ax = plt.subplots()
ax.plot(*step(-np.pi, np.pi, 50, 100))
ax.grid()
plt.title('step function')
plt.xlabel('x')
plt.ylabel('y')
plt.show()

fig, ax = plt.subplots()
ax.plot(*triangular(-np.pi, np.pi, 5, 500))
ax.grid()
plt.title('triangular impulse')
plt.xlabel('x')
plt.ylabel('y')
plt.show()

fig, ax = plt.subplots()
ax.plot(*linear(-5, 5, 100, 300))
ax.grid()
plt.title('linear function')
plt.xlabel('x')
plt.ylabel('y')
plt.show()